{"version":3,"sources":["img/Hearts.jpg","api.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","fetchEvent","offset","console","log","axios","get","then","data","events","App","state","index","currentPos","currentEventsLength","handleScroll","e","scrollTop","target","setState","currentState","this","className","src","hearts","alt","onScroll","month","day","map","singleDay","key","link","value","class","event1","title","width","height","frameBorder","link1","api","prevState","prevProps","newEvents","newEventsArray","forEach","event","push","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,oC,uNCI9BC,EAAa,SAACC,GAGzB,OAFAC,QAAQC,IAAI,WAAYF,GAEjBG,IACJC,IAAI,mDAAqDJ,GACzDK,MAAK,YACJ,OAD8B,EAAvBC,KAAQC,WCuINC,E,4MA3IbC,MAAQ,CACNC,MAAO,EACPC,WAAY,EACZC,oBAAqB,EACrBL,OAAQ,M,EAuFVM,aAAe,SAACC,GACd,IAEIC,EAFUD,EAAEE,OAEQD,UAQpBA,EAAY,EAAKN,MAAME,YAAc,KACvC,EAAKM,UAAS,SAACC,GACb,MAAO,CACLP,WAAaO,EAAaP,YAAc,IACxCD,MAAQQ,EAAaR,OAAS,MAKhCK,EAAY,EAAKN,MAAME,YAAc,GAA0B,IAArB,EAAKF,MAAMC,OACvD,EAAKO,UAAS,SAACC,GACb,MAAO,CACLP,WAAaO,EAAaP,YAAc,IACxCD,MAAQQ,EAAaR,OAAS,O,uDA7G5B,IAAD,EACmBS,KAAKV,MAAvBF,EADD,EACCA,OAAQG,EADT,EACSA,MAChB,OAAkB,OAAXH,EACL,sCAEA,yBAAKa,UAAU,aACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,SAASC,IAAKC,IAAQC,IAAI,gBACzC,yBAAKH,UAAU,YACb,mCACA,mCACA,oCACA,qCAGJ,yBAAKA,UAAU,UAAUI,SAAUL,KAAKN,cACtC,yBAAKO,UAAU,QACb,uBAAGA,UAAU,SAASb,EAAOG,GAAOe,QAClClB,EAAOG,GAAOgB,IAAM,GACpB,uBAAGN,UAAU,OAAO,IAAMb,EAAOG,GAAOgB,KAExC,uBAAGN,UAAU,OAAOD,KAAKV,MAAMF,OAAOY,KAAKV,MAAMC,OAAOgB,MAG3DnB,EAAOoB,KAAI,SAACC,GACX,OACE,yBACER,UAAU,WACVS,IAAKD,EAAUE,KACfC,MAAOH,GAKP,yBAAKI,MAAM,mBACT,yBAAKZ,UAAU,YAmBb,yBAAKA,UAAU,aACb,2BAAIQ,EAAUK,UAGlB,yBAAKD,MAAM,oBACT,4BACEE,MAAON,EAAUK,OACjBE,MAAM,OACNC,OAAO,OACPC,YAAY,IACZhB,IAAKO,EAAUU,gBAU/B,uD,0CAKe,IAAD,OAClBC,EAAepB,KAAKV,MAAMG,qBAAqBP,MAAK,SAACE,GACnD,EAAKU,SAAS,CAAEV,SAAQK,oBAAqB,S,yCAgC9B4B,EAAWC,GAAY,IAAD,OAErCD,EAAU9B,QAAUS,KAAKV,MAAMC,OAC/BS,KAAKV,MAAMG,oBAAsBO,KAAKV,MAAMC,OAAS,GAErD6B,EAAepB,KAAKV,MAAMG,qBAAqBP,MAAK,SAACqC,GACnD,EAAKzB,UAAS,SAACC,GACb,IAAMyB,EAAc,YAAOzB,EAAaX,QAExC,OADAmC,EAAUE,SAAQ,SAACC,GAAD,OAAWF,EAAeG,KAAKD,MAC1C,CACLtC,OAAQoC,EACR/B,oBAAsBM,EAAaN,qBAAuB,a,GApIpDmC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtD,MAAK,SAAAuD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9D,QAAQ8D,MAAMA,EAAMC,c","file":"static/js/main.9eecddfa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Hearts.a2120ce1.jpg\";","// https://yrglset.herokuapp.com/api/goals/2020\n\nimport axios from \"axios\";\n\nexport const fetchEvent = (offset) => {\n  console.log(\"in fetch\", offset);\n\n  return axios\n    .get(\"https://gola-be.herokuapp.com/api/events?offset=\" + offset)\n    .then(({ data: { events } }) => {\n      return events;\n    });\n};\n","import React, { Component } from \"react\";\nimport hearts from \"./img/Hearts.jpg\";\nimport * as api from \"./api\";\n\nclass App extends Component {\n  state = {\n    index: 0,\n    currentPos: 0,\n    currentEventsLength: 0,\n    events: null,\n  };\n  render() {\n    const { events, index } = this.state;\n    return events === null ? (\n      <p>loading</p>\n    ) : (\n      <div className=\"wholePage\">\n        <div className=\"page\">\n          <div className=\"sideBar\">\n            <img className=\"hearts\" src={hearts} alt=\"hearts logo\" />\n            <div className=\"navLinks\">\n              <p>some</p>\n              <p>pish</p>\n              <p>dunno</p>\n              <p>what</p>\n            </div>\n          </div>\n          <div className=\"entries\" onScroll={this.handleScroll}>\n            <div className=\"date\">\n              <p className=\"month\">{events[index].month}</p>\n              {+events[index].day < 10 ? (\n                <p className=\"day\">{\"0\" + events[index].day}</p>\n              ) : (\n                <p className=\"day\">{this.state.events[this.state.index].day}</p>\n              )}\n            </div>\n            {events.map((singleDay) => {\n              return (\n                <div\n                  className=\"listItem\"\n                  key={singleDay.link}\n                  value={singleDay}\n                >\n                  {/* <div className=\"date\">\n                   \n                  </div> */}\n                  <div class=\"video-container\">\n                    <div className=\"overText\">\n                      {/* <div className=\"date\">\n                        <p className=\"month\">{data[index].month}</p>\n                        {+data[index].day < 10 ? (\n                          <p className=\"day\">{\"0\" + data[index].day}</p>\n                        ) : (\n                          <p className=\"day\">\n                            {this.state.data[this.state.index].day}\n                          </p>\n                        )}\n                      </div> */}\n                      {/* <div className=\"date\">\n                        <p className=\"month\">{singleDay.month}</p>\n                        {+singleDay.day < 10 ? (\n                          <p className=\"day\">{\"0\" + singleDay.day}</p>\n                        ) : (\n                          <p className=\"day\">{singleDay.day}</p>\n                        )}\n                      </div> */}\n                      <div className=\"eventText\">\n                        <p>{singleDay.event1}</p>\n                      </div>\n                    </div>\n                    <div class=\"video-foreground\">\n                      <iframe\n                        title={singleDay.event1}\n                        width=\"100%\"\n                        height=\"100%\"\n                        frameBorder=\"0\"\n                        src={singleDay.link1}\n                      />\n                    </div>\n                  </div>\n                  {/* <p className=\"event\">{singleDay.event}</p> */}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n        <footer>some footer chat</footer>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    api.fetchEvent(this.state.currentEventsLength).then((events) => {\n      this.setState({ events, currentEventsLength: 5 });\n    });\n  }\n  handleScroll = (e) => {\n    let element = e.target;\n\n    let scrollTop = element.scrollTop;\n    // console.log(this.state.currentPos, \"current position\");\n\n    // console.log(\n    //   scrollTop - this.state.currentPos,\n    //   \"scrollTop minus currentpos\"\n    // );\n\n    if (scrollTop - this.state.currentPos >= 613) {\n      this.setState((currentState) => {\n        return {\n          currentPos: (currentState.currentPos += 613),\n          index: (currentState.index += 1),\n        };\n      });\n    }\n\n    if (scrollTop - this.state.currentPos <= 0 && this.state.index !== 0) {\n      this.setState((currentState) => {\n        return {\n          currentPos: (currentState.currentPos -= 613),\n          index: (currentState.index -= 1),\n        };\n      });\n    }\n  };\n  componentDidUpdate(prevState, prevProps) {\n    if (\n      prevState.index !== this.state.index &&\n      this.state.currentEventsLength - this.state.index <= 2\n    ) {\n      api.fetchEvent(this.state.currentEventsLength).then((newEvents) => {\n        this.setState((currentState) => {\n          const newEventsArray = [...currentState.events];\n          newEvents.forEach((event) => newEventsArray.push(event));\n          return {\n            events: newEventsArray,\n            currentEventsLength: (currentState.currentEventsLength += 5),\n          };\n        });\n      });\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}